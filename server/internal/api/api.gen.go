// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for DonationType.
const (
	Clothing DonationType = "clothing"
	Food     DonationType = "food"
	Money    DonationType = "money"
)

// DonationDistribution defines model for DonationDistribution.
type DonationDistribution struct {
	Date *time.Time `json:"date,omitempty"`

	// Description (optional) description of the distribution
	Description *string `json:"description,omitempty"`

	// DonationId id of the donation this is associated with
	DonationId int `json:"donation_id"`

	// Id id of the distribution (to be populated by the service)
	Id *int `json:"id,omitempty"`

	// Quantity the amount distributed from the donation
	Quantity int64 `json:"quantity"`

	// Type The type of donation
	Type DonationType `json:"type"`
}

// DonationInventory defines model for DonationInventory.
type DonationInventory struct {
	Report *[]TypeDonationStatus `json:"report,omitempty"`
}

// DonationRegistration defines model for DonationRegistration.
type DonationRegistration struct {
	Date *time.Time `json:"date,omitempty"`

	// Description (optional) description of the donation
	Description *string `json:"description,omitempty"`

	// Id id of the donation (to be populated by the service)
	Id *int64 `json:"id,omitempty"`

	// Name name of the donor; all donations under the same name are attributed to the same person (for simplicity)
	Name string `json:"name"`

	// Quantity the amount given for the donation
	Quantity int64 `json:"quantity"`

	// Type The type of donation
	Type DonationType `json:"type"`
}

// DonationStatus defines model for DonationStatus.
type DonationStatus struct {
	Distributions []DonationDistribution `json:"distributions"`
	Donation      DonationRegistration   `json:"donation"`
}

// DonationSummary defines model for DonationSummary.
type DonationSummary struct {
	// Quantity the amount given for the donation
	Quantity *int64 `json:"quantity,omitempty"`

	// QuantityDistributed the amount distributed for the donation
	QuantityDistributed *int64 `json:"quantity_distributed,omitempty"`

	// Type The type of donation
	Type *DonationType `json:"type,omitempty"`
}

// DonationType The type of donation
type DonationType string

// DonorReport defines model for DonorReport.
type DonorReport struct {
	Report *[]DonorSummary `json:"report,omitempty"`
}

// DonorSummary defines model for DonorSummary.
type DonorSummary struct {
	Donations []DonationSummary `json:"donations"`

	// Name name of the donor; all donations under the same name are attributed to the same person (for simplicity)
	Name string `json:"name"`
}

// TypeDonationStatus defines model for TypeDonationStatus.
type TypeDonationStatus struct {
	Statuses []DonationStatus `json:"statuses"`

	// Type The type of donation
	Type DonationType `json:"type"`
}

// DistributeDonationJSONRequestBody defines body for DistributeDonation for application/json ContentType.
type DistributeDonationJSONRequestBody = DonationDistribution

// RegisterDonationJSONRequestBody defines body for RegisterDonation for application/json ContentType.
type RegisterDonationJSONRequestBody = DonationRegistration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Distribute certain donations
	// (POST /donations/distribute)
	DistributeDonation(w http.ResponseWriter, r *http.Request)
	// Records details of the donations
	// (POST /donations/register)
	RegisterDonation(w http.ResponseWriter, r *http.Request)
	// Generates a donator report for each donor
	// (GET /donations/report/donor)
	GetDonorReport(w http.ResponseWriter, r *http.Request)
	// Generates an inventory report for the current status of donations
	// (GET /donations/report/inventory)
	GetDonationInventoryReport(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DistributeDonation operation middleware
func (siw *ServerInterfaceWrapper) DistributeDonation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DistributeDonation(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterDonation operation middleware
func (siw *ServerInterfaceWrapper) RegisterDonation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterDonation(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDonorReport operation middleware
func (siw *ServerInterfaceWrapper) GetDonorReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDonorReport(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDonationInventoryReport operation middleware
func (siw *ServerInterfaceWrapper) GetDonationInventoryReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDonationInventoryReport(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/donations/distribute", wrapper.DistributeDonation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/donations/register", wrapper.RegisterDonation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/donations/report/donor", wrapper.GetDonorReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/donations/report/inventory", wrapper.GetDonationInventoryReport)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY32/bNhD+Vw7cgLWAKjlptwfvZelSFBmKtUjyVgQFQ50lFhKpkqd4XuH/fTjqpy25",
	"ddM2256iUOTd8b7vvjvro1C2rKxBQ14sPwqvcixleDy3RpK25lx7cvq25mder5yt0JHGsCuVhPx3ZV0p",
	"SSzDwhPSJYpI0KZCsRR83mRiG4kUvXK66kzt/Cse2fAki8cwegF2BZQjpOMw5ky34b7T6dS0Tnsz7Tag",
	"XHvQHqT3VmlJmMJaUz6Y1oYwQ8e2P2NyFBk8Igu3CJWt6iIYvd2ETR7dnVb4eNb+h1oa0rSZeuGjsrS1",
	"ocENprBytty5jogE/iXLqkCxPIkGNLShX56JSJTa6LIuw8up/2blo/jR4UosxQ/JQIqkZUTS0eGa9263",
	"kXD4odYOU7F8u5P81tzoVje9T3v7HhWxy87chblDQ9ZtptRyWFlH/KQJS/+5ADmwzuoVSar9cDUhnZOb",
	"EPbBSC4x4wzLf5vnA6ITs0dS+wgOfpIsU4IYWeLUNa+OnFv3K8ii6OPwUJsUXeOat4b90iFI6plMdnhf",
	"ofMc/so68LqsCq00bXbCFX/Y3MC5nc36UWWU6Ts0wC7+Q/UT8vtlhdNSfErUkRr5o4tnVuwn5TOo7LH2",
	"dorqkGqIaC/qT967Lks5Jxdfh/4RRdA5eDdS4uMV+14u70Wsg6m7bq3tBnydI/ARruRxORim+1tRWoOb",
	"EK1lbVeFpZzr7WamAM9ZBC572f4qOQ+2OrCPFfLhxLQuOlX64po4GMT/QxfnpWZIx1yxzfTSSUJ9WMd7",
	"5PNAc/4GOtoKaB/a9G58QpuVZTfKGpIqUBJLqQsOJTZ2jfrZ6W8Zr8TKlpN+Lq670dHA2ZsL8BUqvdKq",
	"ab4MkoTCKlmAz7EgRtpCKY3MkDHVbujUupt+YhGJQis0PiSg4ZU4q6TKEU7jhYhE7TjAnKhaJsl6vY5l",
	"eBtblyXtUZ+8uvj9xZ9XL56cxos4p7IIWUVX+terq6b7Dzb8WmYZuljbJGxJmDuaAp1ehfiv2vjP3lyI",
	"SNyh800CTuJFfHLCtm2FRlZaLMXTeBE/FZGoJOWBCklPsWQQwkAj62laNGdFYde+IX3r1pNcrTh5hc1g",
	"naMBaVLI7RrKWuX7Y48PJTTS3AiUrKjmKggb90Uugk7RgTGbaHYU3AUXkpqToy7FiHE5NFNsKpai7519",
	"6YiGnejpuU03HeXQhOvLigs57Eve+6alNiS/X7PeNsXgK2vaqjxdnHx3n/u14Wul0PtVXUCfHSbKs8Vi",
	"ivlzmUKboFDKvhPvUS5BoSOpzYAz01RmfjxBeHHD50eUc2HwQHc/wjlU1qWQIkld+AnTIvBMQOkHif/J",
	"BxmPJiyDR6GDRsANNIKuf0aApOLH8xzko3P8Gwcx5d9le+UHYt/eaPcg7Nv3+Z3Ydxng9wfxP5KBPO8k",
	"gR3sPMMZEr5Ew2GiB9mYtw6ag8wxjkf/3euXJVkA57OflJmoqO+6LwIoVd7QcUKOl0jj6WyC1eJbYtW7",
	"+QKIfp6D6MIQOsOdCN0dOnjhnHV7YB1OYejFOzk5GjU9/izxOeRGfbzznGpfFXLTQadq59AQNIPJWB58",
	"BJmzddX+St9UGB/AbvdzyYPguPeF5oHRnElr9yvqE/k8hPK2X98P63UXuA/2w6TGwA2DRTeMN21CdHP/",
	"yMH2ZvtPAAAA//+M0R5JSxUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
